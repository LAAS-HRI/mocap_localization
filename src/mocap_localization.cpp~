#include <ros/ros.h>
#include <string>
#include <cstdlib>
#include "../include/optitrack/or_pose_estimator_state.h"
#include <tf/tf.h>
#include <tf/transform_broadcaster.h>

using namespace std;

void mocapCallback(const optitrack::or_pose_estimator_state::ConstPtr &msg){
  static TransformBroadcaster br;
  tf::Transform transform;
  transform.setOrigin( tf::Vector3(msg->pose[0].x, msg->pos[0].y, msg->pos[0].z) );
  tf::Quaternion q(msg->pose[0].qx,msg->pose[0].qy,msg->pose[0].qz,msg->pose[0].qw);
  transform.setRotation(q);
  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "map", "base_link"));
}

int main(int argc, char** argv){
  ros::init(argc, argv, "mocap_localization");
  ros::NodeHandle node;
  ros::Subscriber sub = node.subscribe("/optitrack/bodies/Mummer", 10, &mocapCallback);

  ros::spin();
  return 0;
};
